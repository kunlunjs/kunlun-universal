datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// 用户
model User {
  id         String      @id @default(cuid())
  email      String?     @unique
  mobile     String      @unique
  password   Password?
  notes      Note[]
  components Component[]
  snippets   Snippet[]
  tools      Tool[]
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?

  @@map("user")
}

/// 密码
model Password {
  hash    String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String @unique

  @@map("password")
}

/// 分类
model Category {
  id         String    @id @default(cuid())
  name       String
  notes      Note[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("category")
}

/// 文章
model Note {
  id         String     @id @default(cuid())
  title      String
  sub_title  String?
  banner     String?
  // 封面
  cover      String?
  body       String?
  category   Category[]
  user       User       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id    String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  deleted_at DateTime?

  @@map("note")
}

/// 组件
model Component {
  id           String    @id @default(cuid())
  title        String
  sub_title    String?
  banner       String?
  cover        String?
  body         String?
  publisher    User      @relation(fields: [publisher_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  publisher_id String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt()
  deleted_at   DateTime?

  @@map("component")
}

/// 代码片段语言
enum ECodeLanguage {
  CSS
  HTML
  Go
  Dart
  Java
  Swift
  Shell
  Kotlin
  Python
  CSharp
  JavaScript
  TypeScript
}

/// 代码片段
model Snippet {
  id           String        @id @default(cuid())
  language     ECodeLanguage
  body         Json?
  /// 发布者
  publisher    User          @relation(fields: [publisher_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  /// 发布者
  publisher_id String
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  deleted_at   DateTime?

  @@map("snippet")
}

/// 工具类型
enum EToolType {
  /// IDE
  IDE
  /// 媒体工具
  Media
  /// 系统工具
  System
  /// 图形设计
  Design
  /// 编辑器
  Editor
  /// 应用软件
  Application
  /// 编程开发
  Programming
  /// 其它
  Other
}

enum EPlatform {
  Mac
  iOS
  Linux
  Windows
  Android
}

/// 工具
model Tool {
  id           String      @id @default(cuid())
  name         String
  icon         String?
  url          String
  /// 版本
  version      String?
  /// 兼容的平台
  platform     EPlatform
  type         EToolType[]
  /// 是否开源
  opensource   Boolean?
  description  String?
  /// 发布者
  publisher    User        @relation(fields: [publisher_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  /// 发布者
  publisher_id String
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  deleted_at   DateTime?

  @@map("tool")
}

/// 标签
model Tag {
  id          String    @id @default(cuid())
  name        String
  icon        String?
  description String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  @@map("tag")
}

/// 阅读数
model View {
  id         String   @id @default(cuid())
  name       String
  created_at DateTime @default(now())

  @@map("view")
}

/// 网址
model Website {
  id          String    @id @default(cuid())
  title       String?
  description String?
  icon        String?
  url         String
  /// 加精
  recommend   Boolean   @default(false)
  // 相似的网站
  // alternatives Website[] @relation("Website")
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  @@map("website")
}
